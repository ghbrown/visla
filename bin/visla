#!/usr/bin/python3
import argparse
from pathlib import Path
from visla import VGraph
import matplotlib.pyplot as plt
import cmasher as cmr

# set up command line argument parser
parser = argparse.ArgumentParser()
parser.add_argument('file',
                    metavar='file',
                    help='file containing matrix/graph, format guessed from the extension unless --filetype is used'
                    )
parser.add_argument('--filetype',
                    choices=VGraph()._VGraph__impl_files,
                    metavar='extension',
                    help='force usage of filetype (if not detected automatically)'
                    )
parser.add_argument('--bipartite',
                    choices=['T','F'],
                    default=None,
                    help='T: force bipartite version of matrix, F: force non-bipartite version of matrix (even if non-square)'
                    )
parser.add_argument('--algorithm',
                    choices=['neato','fdp','sfdp'],
                    default='sfdp',
                    action='store',
                    help='algorithm used to lay out graph in 2D'
                    )
parser.add_argument('--linewidth',
                    action='store',
                    type=float,
                    metavar='width',
                    help='linewidth in render, float'
                    )
parser.add_argument('--save',
                    metavar='file',
                    action='store',
                    help='also save visualization to file (type determined from extension), with transparent background if possible'
                    )
parser.add_argument('--time',
                    action='store_true',
                    help='print timings of key tasks'
                    )
parser.add_argument('--colormap',
                    choices=['tropical','neon','jet','turbo','hsv'],
                    default='tropical',
                    help='colormap used for edges'
                    )
args = parser.parse_args()
path = Path(args.file)
file_type = args.filetype
algorithm = args.algorithm
linewidth = args.linewidth
save = args.save
timings = args.time
colormap_string = args.colormap

if (args.bipartite is not None): # cast 'T'/'F' to True/False
    bipartite = (args.bipartite == 'T')
else:                            # choose bipartiteness automatically
    bipartite = args.bipartite
string_to_colormap_dict = {
    'tropical' : cmr.get_sub_cmap(cmr.tropical,0.0,1.0),
    'neon'     : cmr.neon,
    'jet'      : plt.get_cmap('jet'),
    'turbo'    : plt.get_cmap('turbo'),
    'hsv'      : plt.get_cmap('hsv'),
    }
colormap = string_to_colormap_dict[colormap_string]

B = VGraph()  # object to hold graph
B.bipartite = bipartite  # set bipartite-ness (should be set before read)
B.timings = timings
B.from_file(path,file_type=file_type)  # read in graph
B.layout(prog=algorithm)  # lay out graph nodes in 2D using sdfp algorithm
B.cm = colormap

if (save is not None): # set up our own fig/ax to show and save figure
    fig, ax = plt.subplots(nrows=1,ncols=1)  # we own figure to control/save plot
    fig, ax = B.visualize(fig,ax,linewidths=linewidth)  # visualize graph
    plt.show()
    fig.savefig(save,dpi=1200,transparent=True)
else:  # let VGraph create and destroy its own figure internally
    B.visualize(linewidths=linewidth)

